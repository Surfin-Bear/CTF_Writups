this level, while not introducing any new techniques or tools,
certainly provides some complexity by making code harder to read.

ex.

starting with main, nothing much of note at first - some memory shuffling followed
by calling a few functions. However, 2400 does not seem to be a actual address as
making the pc = 2400 will result in a insn address unaligned. we'll leave a breakpoint
and come back to that later.

4438 <main>
4438:  3e40 2045      mov	#0x4520, r14
443c:  0f4e           mov	r14, r15
443e:  3e40 f800      mov	#0xf8, r14
4442:  3f40 0024      mov	#0x2400, r15
4446:  b012 8644      call	#0x4486 <enc>
444a:  b012 0024      call	#0x2400
444e:  0f43           clr	r15

4486 <enc>
4486:  0b12           push	r11
4488:  0a12           push	r10
448a:  0912           push	r9
448c:  0812           push	r8
448e:  0d43           clr	r13
4490:  cd4d 7c24      mov.b	r13, 0x247c(r13)
4494:  1d53           inc	r13
4496:  3d90 0001      cmp	#0x100, r13
449a:  fa23           jnz	$-0xa <enc+0xa>
449c:  3c40 7c24      mov	#0x247c, r12
44a0:  0d43           clr	r13
44a2:  0b4d           mov	r13, r11
44a4:  684c           mov.b	@r12, r8
44a6:  4a48           mov.b	r8, r10
44a8:  0d5a           add	r10, r13
44aa:  0a4b           mov	r11, r10
44ac:  3af0 0f00      and	#0xf, r10
44b0:  5a4a 7244      mov.b	0x4472(r10), r10
44b4:  8a11           sxt	r10
44b6:  0d5a           add	r10, r13
44b8:  3df0 ff00      and	#0xff, r13
44bc:  0a4d           mov	r13, r10
44be:  3a50 7c24      add	#0x247c, r10
44c2:  694a           mov.b	@r10, r9
44c4:  ca48 0000      mov.b	r8, 0x0(r10)
44c8:  cc49 0000      mov.b	r9, 0x0(r12)
44cc:  1b53           inc	r11
44ce:  1c53           inc	r12
44d0:  3b90 0001      cmp	#0x100, r11
44d4:  e723           jnz	$-0x30 <enc+0x1e>
44d6:  0b43           clr	r11
44d8:  0c4b           mov	r11, r12
44da:  183c           jmp	$+0x32 <enc+0x86>
44dc:  1c53           inc	r12
44de:  3cf0 ff00      and	#0xff, r12
44e2:  0a4c           mov	r12, r10
44e4:  3a50 7c24      add	#0x247c, r10
44e8:  684a           mov.b	@r10, r8
44ea:  4b58           add.b	r8, r11
44ec:  4b4b           mov.b	r11, r11
44ee:  0d4b           mov	r11, r13
44f0:  3d50 7c24      add	#0x247c, r13
44f4:  694d           mov.b	@r13, r9
44f6:  cd48 0000      mov.b	r8, 0x0(r13)
44fa:  ca49 0000      mov.b	r9, 0x0(r10)
44fe:  695d           add.b	@r13, r9
4500:  4d49           mov.b	r9, r13
4502:  dfed 7c24 0000 xor.b	0x247c(r13), 0x0(r15)
4508:  1f53           inc	r15
450a:  3e53           add	#-0x1, r14
450c:  0e93           tst	r14
450e:  e623           jnz	$-0x32 <enc+0x56>
4510:  3841           pop	r8
4512:  3941           pop	r9
4514:  3a41           pop	r10
4516:  3b41           pop	r11
4518:  3041           ret

wow, talk about some dense code. nothing really notable or decipherable here,
except somehow this makes 2400 an executable address, although we cant initially
see the code, but we can fix that. after letting the enc function execute, some new
code appears within the memory dump, allowing us to run it through a dissambler to see
whats happening. oh my...

0b12           push	r11
0412           push	r4
0441           mov	sp, r4
2452           add	#0x4, r4
3150 e0ff      add	#0xffe0, sp
3b40 2045      mov	#0x4520, r11
073c           jmp	$+0x10
1b53           inc	r11
8f11           sxt	r15
0f12           push	r15
0312           push	#0x0
b012 6424      call	#0x2464
2152           add	#0x4, sp
6f4b           mov.b	@r11, r15
4f93           tst.b	r15
f623           jnz	$-0x12
3012 0a00      push	#0xa
0312           push	#0x0
b012 6424      call	#0x2464
2152           add	#0x4, sp
3012 1f00      push	#0x1f
3f40 dcff      mov	#0xffdc, r15
0f54           add	r4, r15
0f12           push	r15
2312           push	#0x2
b012 6424      call	#0x2464
3150 0600      add	#0x6, sp
b490 58b7 dcff cmp	#0xb758, -0x24(r4)
0520           jnz	$+0xc
3012 7f00      push	#0x7f
b012 6424      call	#0x2464
2153           incd	sp
3150 2000      add	#0x20, sp
3441           pop	r4
3b41           pop	r11
3041           ret
1e41 0200      mov	0x2(sp), r14
0212           push	sr
0f4e           mov	r14, r15
8f10           swpb	r15
024f           mov	r15, sr
32d0 0080      bis	#0x8000, sr
b012 1000      call	#0x10
3241           pop	sr
3041           ret
d21a 189a      call	&0x9a18
22dc           bis	@r12, sr
45b9           bit.b	r9, r5
4279           subc.b	r9, sr
2d55           add	@r5, r13
858e a4a2      sub	r14, -0x5d5c(r5)
67d7           bis.b	@r7, r7
14ae a119      dadd	0x19a1(r14), r4
76f6           and.b	@r6+, r6
42cb           bic.b	r11, sr
1c04 0efa      rrc	-0x5f2(r12)
a61b           invalid	@r6
74a7           dadd.b	@r7+, r4
416b           addc.b	r11, sp
d237           jge	$-0x5a
a253 22e4      incd	&0xe422
66af           dadd.b	@r15, r6
c1a5 938b      dadd.b	r5, -0x746d(sp)
8971 9b88      subc	sp, -0x7765(r9)
fa9b 6674      cmp.b	@r11+, 0x7466(r10)
4e21           jnz	$+0x29e
2a6b           addc	@r11, r10
b143 9151      mov	#-0x1, 0x5191(sp)
3dcc           bic	@r12+, r13
a6f5 daa7      and	@r5, -0x5826(r6)
db3f           jmp	$-0x48
8d3c           jmp	$+0x11c
4d18           rrc.b	r13
4736           jge	$-0x370
dfa6 459a 2461 dadd.b	-0x65bb(r6), 0x6124(r15)
921d 3291      sxt	&0x9132
14e6 8157      xor	0x5781(r6), r4
b0fe 2ddd      and	@r14+, -0x22d3(pc)
400b           reti	pc
8688 6310      sub	r8, 0x1063(r6)
3ab3           bit	#-0x1, r10
612b           jnc	$-0x13c
0bd9           bis	r9, r11
483f           jmp	$-0x16e
4e04           rrc.b	r14
5870 4c38      subc.b	0x384c(pc), r8
c93c           jmp	$+0x194
ff36           jge	$-0x200
0e01           rra	r14
7f3e           jmp	$-0x300
fa55 aeef      add.b	@r5+, -0x1052(r10)
051c           rrc	r5
242c           jc	$+0x4a
3c56           add	@r6+, r12
13af e57b      dadd	0x7be5(r15), 4
8abf 3040      bit	r15, 0x4030(r10)
c537           jge	$-0x74
656e           addc.b	@r14, r5
8278 9af9      subc	r8, &0xf99a
9d02 be83      call	-0x7c42(r13)
b38c e181      sub	@r12+, 8
3ad8           bis	@r8+, r10
395a           add	@r10+, r9
fce3 4f03      xor.b	#-0x1, 0x34f(r12)
8ec9 9395      bic	r9, -0x6a6d(r14)
4a15           rra.b	r10
ce3b           jl	$-0x62
fd1e           call	@r13+
7779           subc.b	@r9+, r7
c9c3 5ff2      bic.b	#0x0, -0xda1(r9)
3dc7           bic	@r7+, r13
5953           add.b	#0x1, r9
8826           jz	$-0x2ee
d0b5 d9f8 639e bit.b	-0x727(r5), -0x619d(pc)
e970 01cd      subc.b	@pc, -0x32ff(r9)
2119           rra	@sp
ca6a d12c      addc.b	r10, 0x2cd1(r10)
97e2 7538 96c5 xor	&0x3875, -0x3a6a(r7)
8f28           jnc	$+0x120
d682 1be5 ab20 sub.b	&0xe51b, 0x20ab(r6)
7389           sub.b	@r9+, 4
48aa           dadd.b	r10, r8
1fa3           dinc	r15
472f           jc	$-0x170
a564 de2d      addc	@r4, 0x2dde(r5)
b710           swpb	@r7+
9081 5205 8d44 sub	0x552(sp), 0x448d(pc)
cff4 bc2e      and.b	r4, 0x2ebc(r15)
577a d5f4      subc.b	-0xb2b(r10), r7
a851 c243      add	@sp, 0x43c2(r8)
277d           subc	@r13, r7
a4ca 1e6b      bic	@r10, 0x6b1e(r4)

most of this seems like interrupt code for printing strings and such,
and only one spot seems to have a true comparison, so lets check that

b012 6424      call	#0x2464
3150 0600      add	#0x6, sp
b490 58b7 dcff cmp	#0xb758, -0x24(r4)
0520           jnz	$+0xc
3012 7f00      push	#0x7f
b012 6424      call	#0x2464

trying the value being compared as the password opens the lock. it would seem that
encryption is pointless if you dont properly check values i.e. not using
raw value comparison

hex encoded password : 58b7
